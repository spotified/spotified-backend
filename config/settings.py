"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""
import os

from django.core.management import CommandError

from . import environment

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "yer-j!p*@pb)h@kagant6l*r1cpqzm6t0+*1&%(bj0oosz5$bn"

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    # Required by Django
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Spotified
    "api",
    "users",
    "playlists",
    # External Apps.
    "django_extensions",
    "raven.contrib.django.raven_compat",
    "rest_framework",
    "rest_framework.authtoken",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ]
        },
    }
]

WSGI_APPLICATION = "config.wsgi.application"

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

AUTH_USER_MODEL = "users.SpotifyUser"

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator"
    },
    {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator"},
    {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator"},
    {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator"},
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Europe/Berlin"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/

STATIC_URL = "/static/"

# Import global settings, skip _50_env_* modules
CONF_DIR = os.path.join(BASE_DIR, "config", "includes") + os.sep


def order_based_settings(order_condition):
    configurations = []
    files = os.listdir(CONF_DIR)
    files.sort()
    for f in files:
        # Only import non env modules
        if (
            f == "__init__.py"
            or not f.endswith(".py")
            or f.startswith("_50_env_")
            or f.endswith("_example.py")
            or f.endswith("_tpl.py")
        ):
            continue
        order = int(f.split("_")[1])
        if not order_condition(order):
            continue
        configurations.append(f)
    return configurations


# Include configurations with order < 50
for configuration in order_based_settings(lambda order: order < 50):
    with open(CONF_DIR + configuration, "r") as fh:
        exec(fh.read(), globals(), locals())

# Environment
if environment.NAME is None or environment.IS_FOR_DEVELOPMENT is None:
    raise CommandError(
        # pragma: no cover
        "Configurationerror: Please edit environment.py in the project_root "
        "and set NAME and IS_FOR_DEVELOPMENT"
    )

SECRET_KEY = environment.SECRET_KEY
ENVIRONMENT = environment

# Import env module
with open("{}_50_env_{}.py".format(CONF_DIR, environment.NAME), "r") as fh:
    exec(fh.read(), globals(), locals())

# Include configurations with order > 50
for configuration in order_based_settings(lambda order: order > 50):
    with open(CONF_DIR + configuration, "r") as fh:
        exec(fh.read(), globals(), locals())
