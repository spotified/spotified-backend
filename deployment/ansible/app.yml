---
- hosts: [app]
  remote_user: "{{ remote_user }}"

  vars:
    - app_wsgi: "config.wsgi"
    - gunicorn_service_name: "gunicorn.{{ project_name }}"
    - gunicorn_service_file: "/etc/systemd/system/{{ gunicorn_service_name }}.service"

  tasks:
    - name: Install virtualenv and pip
      apt:
        name: ['virtualenv', 'python3-pip']

    - name: App user is present
      user:
        name: "{{ app_user }}"

    - name: Creates App home dir
      file:
        path: "{{ app_home }}"
        state: directory

    - name: Chown App dir
      file:
        path: "{{ app_home }}"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: git checkout
      become: true
      become_user: "{{ app_user }}"
      git:
        repo: 'https://github.com/spotified/spotified-backend.git'
        dest: "{{ app_dir }}"
        force: true
        version: master

    - name: Create _50_env_production.py
      become: true
      become_user: "{{ app_user }}"
      template:
        src: templates/_50_env_production.py.j2
        dest: "{{ app_dir }}/config/includes/_50_env_production.py"

    - name: Create Virtual Env
      become: true
      become_user: "{{ app_user }}"
      pip:
        name: poetry
        virtualenv: "{{ venv_dir }}"

    - name: Install python deps
      become: true
      become_user: "{{ app_user }}"
      shell: "source {{ venv_dir }}/bin/activate && cd {{ app_dir }} && poetry install --no-dev"
      args:
        executable: /bin/bash

    - name: Make sure a Gunicorn service is stopped
      stat:
        path: "{{ gunicorn_service_file }}"
      register: p
    - systemd:
        state: stopped
        name: "{{ gunicorn_service_name }}"
      when: p.stat.exists

    - name: Run Migrations
      become: true
      become_user: "{{ app_user }}"
      command: "{{ manage_py }} migrate"

    - name: Check environment.py file exists
      become: true
      become_user: "{{ app_user }}"
      stat:
        path: "{{ app_dir }}/config/environment.py"
      register: p
    - template:
        src: templates/environment.py.j2
        dest: "{{ app_dir }}/config/environment.py"
      when: p.stat.exists == False

    - name: Check _20_credentials.py file exists
      become: true
      become_user: "{{ app_user }}"
      stat:
        path: "{{ app_dir }}/config/includes/_20_credentials.py"
      register: p
    - template:
        src: templates/_20_credentials.py.j2
        dest: "{{ app_dir }}/config/includes/_20_credentials.py"
      when: p.stat.exists == False

    - name: Run Migrations
      become: true
      become_user: "{{ app_user }}"
      command: "{{ manage_py }} migrate"

    - name: Clean pyc
      become: true
      become_user: "{{ app_user }}"
      command: "{{ manage_py }} clean_pyc"

    - name: Set DBUG = False
      become: true
      become_user: "{{ app_user }}"
      replace:
        path: "{{ app_dir }}/config/settings.py"
        regexp: '^DEBUG = True$'
        replace: "DEBUG = False"

    - name: Gunicorn .service file is in place
      template:
        src: templates/gunicorn.service.j2
        dest: "{{ gunicorn_service_file }}"

    - name: Make sure a Gunicorn service is running
      systemd:
        daemon_reload: true
        enabled: true
        state: started
        name: "{{ gunicorn_service_name }}"

    - name: add startup to root/.profile
      blockinfile:
        dest: /root/.profile
        block: |
          sudo su - {{ app_user }} -s /bin/bash;

    - name: add startup to app user /.profile
      become: true
      become_user: "{{ app_user }}"
      blockinfile:
        dest: /home/{{ app_user }}/.profile
        block: |
          source {{ venv_dir }}/bin/activate;
          cd {{ app_dir }};
